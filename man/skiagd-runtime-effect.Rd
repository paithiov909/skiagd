% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runtime-effect.R
\name{RuntimeEffect}
\alias{RuntimeEffect}
\title{RuntimeEffect}
\arguments{
\item{sksl}{A string scalar of SkSL source.
The fragment shader must receive the currently filtered image
as \code{shader} uniform.}
}
\value{
For \code{make()}, a \code{RuntimeEffect} object is returned
if the SkSL source is successfully compiled.
Otherwise, an error is thrown with the compilation error message.
}
\description{
\code{RuntimeEffect} is a struct that wraps \code{skia_safe::RuntimeEffect}.

Skia provides a shading language called SkSL.
The syntax is similar to GLSL, but differs in minor details.
A quick overview of their differences
can be found \href{https://github.com/google/skia/tree/main/src/sksl#readme}{here}.

You can compile a SkSL source into a \code{RuntimeEffect}
using \code{RuntimeEffect$make()},
and apply it to the canvas as an \link{ImageFilter}.
}
\details{
\code{RuntimeEffect} as an R environment exposes the following method:
\itemize{
\item \code{make(sksl)}: Takes a SkSL source and compiles it into a \code{RuntimeEffect}.
}

A \code{RuntimeEffect} object has the following method:
\itemize{
\item \code{source()}: Returns the original SkSL source as a string scalar.
}
}
\examples{
\donttest{
effect <-
  RuntimeEffect$make(R"{
    uniform shader image;
    uniform vec2 resolution;
    vec4 main(vec2 fragCoord) {
      vec2 uv = fragCoord / resolution;
      return vec4(uv.x, uv.y, .6, 1.0);
    }
 }")

canvas_size <- dev_size()
imgf <-
  ImageFilter$runtime_shader(
    effect,
    list(resolution = as.double(canvas_size))
  )
canvas() |>
  add_rect(
    matrix(c(0, 0, canvas_size), ncol = 4),
    props = paint(image_filter = imgf)
  ) |>
  draw_img()
}
}
