TARGET = @TARGET@

PROFILE = @PROFILE@

# Add flags if necessary
RUSTFLAGS =

# cxx_build creates symbolic links to whole Rust project in `TARGET_DIR`.
# Placing this inside the project creates recursive symbolic links, which we must avoid.
TARGET_DIR = $(CURDIR)/target
CXXDIR = $(TARGET_DIR)/cxxbridge

LIBDIR = $(TARGET_DIR)/$(TARGET)/$(subst dev,debug,$(PROFILE))
STATLIB = $(LIBDIR)/libskiagd.a
# TODO: configure for libfontconfig
PKG_LIBS = -L$(LIBDIR) -lskiagd -lfontconfig
PKG_CXXFLAGS = -I$(CXXDIR)/skiagd/src

SOURCES = $(wildcard *.cpp)
OBJECTS = lib.rs.o $(SOURCES:.cpp=.o)
CARGO_BUILD_ARGS = --lib --profile $(PROFILE) --manifest-path=./rust/Cargo.toml --target-dir $(TARGET_DIR)

all: C_clean

$(OBJECTS): $(STATLIB)

$(STATLIB):
	# In some environments, ~/.cargo/bin might not be included in PATH, so we need
	# to set it here to ensure cargo can be invoked. It is appended to PATH and
	# therefore is only used if cargo is absent from the user's PATH.
	export PATH="$(PATH):$(HOME)/.cargo/bin" && \
	  export CC="$(CC)" && \
	  export CFLAGS="$(CFLAGS)" && \
	  export RUSTFLAGS="$(RUSTFLAGS)" && \
	  if [ "$(TARGET)" != "wasm32-unknown-emscripten" ]; then \
	    cargo build $(CARGO_BUILD_ARGS); \
	  else \
	    export CARGO_PROFILE_DEV_PANIC="abort" && \
	    export CARGO_PROFILE_RELEASE_PANIC="abort" && \
	    cargo +nightly build $(CARGO_BUILD_ARGS) --target $(TARGET) -Zbuild-std=panic_abort,std; \
	  fi && \
		$(CXX) $(CPICFLAGS) $(CXXFLAGS) -c $(CXXDIR)/skiagd/src/lib.rs.cc

C_clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS)

clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS) rust/target
