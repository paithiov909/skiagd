TARGET = @TARGET@

PROFILE = @PROFILE@

# Add flags if necessary
RUSTFLAGS = --print=native-static-libs # -Ctarget-feature=+crt-static

# This is passed fine to wasm-ld called by rwasm.
# However, the build is failing with the current configuration.
WASM_LDFLAGS = -fPIC -sERROR_ON_UNDEFINED_SYMBOLS=0 -sMAX_WEBGL_VERSION=2
SDKTARGETSYSROOT = $(EMSDK)/upstream/emscripten/cache/sysroot

TARGET_DIR = $(CURDIR)/rust/target
LIBDIR = $(TARGET_DIR)/$(TARGET)/$(subst dev,debug,$(PROFILE))
STATLIB = $(LIBDIR)/libskiagd.a
PKG_LIBS = -L$(LIBDIR) -lskiagd @libs@ $(@SYS@_LIBS)

CARGO_BUILD_ARGS = --lib --profile $(PROFILE) --manifest-path=./rust/Cargo.toml --target-dir $(TARGET_DIR)

all: $(SHLIB) clean_intermediate

$(SHLIB): $(STATLIB)

$(STATLIB):
	# In some environments, ~/.cargo/bin might not be included in PATH, so we need
	# to set it here to ensure cargo can be invoked. It is appended to PATH and
	# therefore is only used if cargo is absent from the user's PATH.
	export PATH="$(PATH):$(HOME)/.cargo/bin" && \
		export CC="$(CC)" && \
		export CFLAGS="$(CFLAGS)" && \
		export RUSTFLAGS="$(RUSTFLAGS)" && \
		if [ "$(TARGET)" != "wasm32-unknown-emscripten" ]; then \
			cargo build $(CARGO_BUILD_ARGS); \
		else \
			export CARGO_PROFILE_DEV_PANIC="abort" && \
			export CARGO_PROFILE_RELEASE_PANIC="abort" && \
			export RUSTFLAGS="$(RUSTFLAGS) -Zdefault-visibility=hidden" && \
			export SDKTARGETSYSROOT=$(SDKTARGETSYSROOT) && \
			export FORCE_SKIA_BUILD=1 && \
			export SKIA_USE_SYSTEM_LIBRARIES=1 && \
			export SKIA_GN_ARGS='cc="$(EMSDK)/upstream/bin/clang" cxx="$(EMSDK)/upstream/bin/clang++" extra_cflags=[] extra_cflags=["--target=$(TARGET)", "-I$(WEBR_ROOT)/wasm/include", "-I$(SDKTARGETSYSROOT)/include/c++/v1", "-I$(SDKTARGETSYSROOT)/include/compat", "-I$(SDKTARGETSYSROOT)/include", "-I$(EMSDK)/upstream/lib/clang/21/include"] extra_ldflags=["-L/opt/webr/wasm/lib"]' && \
			cargo +nightly build $(CARGO_BUILD_ARGS) --target $(TARGET) -Zbuild-std=panic_abort,std; \
		fi

clean_intermediate: $(SHLIB)
	rm -f $(STATLIB)

clean:
	rm -Rf $(SHLIB) $(OBJECTS) $(STATLIB) ./rust/target
