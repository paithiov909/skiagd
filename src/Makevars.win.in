TARGET = @TARGET@

PROFILE = @PROFILE@
FEATURE_FLAGS = @FEATURE_FLAGS@

# Add flags if necessary
RUSTFLAGS = --print=native-static-libs -C link-args=-static

# NOTE: Windows support is limited due to lack of pre-built binaries for our target.
TARGET_DIR = $(CURDIR)/rust/target
LIBDIR = $(TARGET_DIR)/$(TARGET)/$(subst dev,debug,$(PROFILE))
STATLIB = $(LIBDIR)/libskiagd.a

$(info using $(PKG_CONFIG_NAME) from Rtools)
PKG_CONFIG_NAME = fontconfig
PKG_CONFIG ?= $(BINPREF)pkg-config
PKG_LIBS = -L$(LIBDIR) -lskiagd -lbcrypt \
	-lusp10 -lole32 -luser32 -lgdi32 -lfontsub -lkernel32 -ladvapi32 -lntdll -luserenv -lws2_32 -ldbghelp \
	$(shell $(PKG_CONFIG) --libs $(PKG_CONFIG_NAME))

# Rtools doesn't have the linker in the location that cargo expects, so we need
# to overwrite it via configuration.
CARGO_LINKER = x86_64-w64-mingw32.static.posix-gcc.exe

all: $(SHLIB) clean_intermediate

$(SHLIB): $(STATLIB)

$(STATLIB):
	# When the GNU toolchain is used (i.e. on CRAN), -lgcc_eh is specified for
	# building proc-macro2, but Rtools doesn't contain libgcc_eh. This isn't used
	# in actual, but we need this tweak to please the compiler.
	mkdir -p $(LIBDIR)/libgcc_mock && touch $(LIBDIR)/libgcc_mock/libgcc_eh.a

	export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER="$(CARGO_LINKER)" && \
	  export LIBRARY_PATH="$${LIBRARY_PATH};$(LIBDIR)/libgcc_mock" && \
	  export CC="$(CC)" && \
	  export CFLAGS="$(CFLAGS)" && \
	  export RUSTFLAGS="$(RUSTFLAGS)" && \
		export HOST_CC="$(CC)" && \
		export FORCE_SKIA_BUILD=1 && \
		export SKIA_GN_ARGS='cc="$(CC)" cxx="$(CXX)" alink="$(CARGO_LINKER)" solink="$(CARGO_LINKER)"' && \
	  cargo build --target $(TARGET) --lib --profile $(PROFILE) --manifest-path ./rust/Cargo.toml --target-dir $(TARGET_DIR) -v

clean_intermediate: $(SHLIB)
	rm -f $(STATLIB)

clean:
	rm -Rf $(SHLIB) $(OBJECTS) $(STATLIB) ./rust/target

.PHONY: all clean_intermediate clean
